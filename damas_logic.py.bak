# -*- coding: utf-8 -*-
# damas_logic.py (v12.3: Iterative Deepening + Time Management)

import copy
import time
import random
from typing import List, Tuple, Optional, Dict, Set, NamedTuple
from collections import defaultdict

# --- Constantes ---
BRANCO = 1; PRETO = -1; VAZIO = 0; PEDRA = 1; DAMA = 2; PB = 1; PP = -1; DB = 2; DP = -2
DIRECOES_PEDRA = {BRANCO: [(-1, -1), (-1, 1)], PRETO: [(1, -1), (1, 1)]}
DIRECOES_CAPTURA_PEDRA = [(-1,-1),(-1,1),(1,-1),(1,1)] # Mantido para referência
DIRECOES_DAMA = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
TAMANHO_TABULEIRO = 8
PROFUNDIDADE_IA = 12 # Profundidade máxima (aumentada)
TEMPO_PADRAO_IA = 10.0 # Tempo padrão em segundos (aumentado)
TEMPO_MIN_PROFUNDIDADE = 0.1 # Tempo mínimo para completar uma profundidade (segundos)

# Definição de exceção para tempo excedido
class TempoExcedidoError(Exception):
    """Exceção levantada quando o tempo de busca é excedido."""
    pass

# Parâmetros básicos (Constantes Globais)
VALOR_PEDRA = 10.0; VALOR_DAMA = 30.0; BONUS_AVANCO_PEDRA = 0.05
PENALIDADE_PEDRA_ATRASADA = -0.1; BONUS_CONTROLE_CENTRO_PEDRA = 0.5; BONUS_CONTROLE_CENTRO_DAMA = 1.5
BONUS_SEGURANCA_ULTIMA_LINHA = 0.1; BONUS_MOBILIDADE_DAMA = 0.2
# BONUS_CONECTIVIDADE = 0.05; PENALTY_PIECE_ISOLADA = -0.05; # Removidos da heurística v12.1
BONUS_PRESTES_PROMOVER = 3.0
BONUS_PECA_NA_BORDA = 0.5

# Regra: Uma dama recém-promovida não pode se mover imediatamente, deve esperar o próximo turno do jogador
# (após o adversário jogar). Esta regra é implementada utilizando o conjunto damas_recem_promovidas no tabuleiro.

# Parâmetros de Otimização
MAX_QUIESCENCE_DEPTH = 6 #6
TT_TAMANHO_MB = 128; TT_ENTRIES = (TT_TAMANHO_MB * 1024 * 1024) // 32
TT_FLAG_EXACT = 0; TT_FLAG_LOWERBOUND = 1; TT_FLAG_UPPERBOUND = 2

# --- Tipos e Estruturas Auxiliares ---
Posicao = Tuple[int, int]; Movimento = List[Posicao]
class EstadoLanceDesfazer(NamedTuple):
    movimento: Movimento
    peca_movida_original: int
    pecas_capturadas: Dict[Posicao, int]
    foi_promovido: bool
    hash_anterior: int
    damas_recem_promovidas_adicionadas: Set[Posicao] = set()  # Damas adicionadas neste movimento
class TTEntry(NamedTuple):
    profundidade: int; score: float; flag: int; melhor_movimento: Optional[Movimento] = None

# --- Zobrist Hashing ---
ZOBRIST_TABELA = [[[random.randint(1, 2**64 - 1) for _ in range(5)] for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]
ZOBRIST_VEZ_PRETA = random.randint(1, 2**64 - 1)

# --- Classe Peca ---
class Peca:
    def __init__(self, c: int, t: int=PEDRA): self.cor=c; self.tipo=t
    def __repr__(self)->str: cs="B" if self.cor==BRANCO else "P"; ts="P" if self.tipo==PEDRA else "D"; return f"{cs}{ts}"
    @staticmethod
    def get_cor(v: int)->int: return VAZIO if v==VAZIO else (BRANCO if v>0 else PRETO)
    @staticmethod
    def get_tipo(v: int)->int: return VAZIO if v==VAZIO else (DAMA if abs(v)==DAMA else PEDRA)
    @staticmethod
    def get_char(v: int)->str: return {PB:'b',PP:'p',DB:'B',DP:'P'}.get(v,'.')
    @staticmethod
    def get_zobrist_indice(v: int)->int: return {PB:1,PP:2,DB:3,DP:4}.get(v,0)

# --- Classe Tabuleiro ---
class Tabuleiro:
    def __init__(self, estado_inicial: bool = True):
        self.grid = [[VAZIO] * TAMANHO_TABULEIRO for _ in range(TAMANHO_TABULEIRO)]
        self.casas_centro = {(r, c) for r in range(2, 6) for c in range(2, 6)}
        self.casas_centro_expandido = {(2,1),(2,3),(2,5),(3,2),(3,4),(4,3),(4,5),(5,2),(5,4),(5,6)}
        self.hash_atual: int = 0
        self.damas_recem_promovidas: Set[Posicao] = set()  # Conjunto para rastrear posições de damas recém-promovidas
        if estado_inicial: self.configuracao_inicial(); self.hash_atual = self.calcular_hash_zobrist_inicial()

    def configuracao_inicial(self):
        for r in range(TAMANHO_TABULEIRO):
            for c in range(TAMANHO_TABULEIRO):
                if (r+c)%2!=0: self.grid[r][c]=PP if r<3 else (PB if r>4 else VAZIO)
                else: self.grid[r][c]=VAZIO

    def calcular_hash_zobrist_inicial(self) -> int:
        h=0;
        for r in range(TAMANHO_TABULEIRO):
            for c in range(TAMANHO_TABULEIRO):
                p=self.grid[r][c];
                if p != VAZIO: h ^= ZOBRIST_TABELA[r][c][Peca.get_zobrist_indice(p)]
        return h

    def _atualizar_hash_zobrist(self, r: int, c: int, v: int):
         if self.is_valido(r,c): self.hash_atual ^= ZOBRIST_TABELA[r][c][Peca.get_zobrist_indice(v)]

    def _atualizar_hash_turno(self): self.hash_atual ^= ZOBRIST_VEZ_PRETA

    def __repr__(self) -> str:
        h="  "+" ".join(chr(ord('a')+i) for i in range(TAMANHO_TABULEIRO))+" "; l=[h];
        for r in range(TAMANHO_TABULEIRO): l.append(f"{TAMANHO_TABULEIRO-r:<2}"+"".join(Peca.get_char(self.grid[r][c])+" " for c in range(TAMANHO_TABULEIRO))+f"{TAMANHO_TABULEIRO-r:<2}");
        l.append(h); return "\n".join(l)
    def get_peca(self, p: Posicao)->int: r,c=p; return self.grid[r][c] if self.is_valido(r,c) else VAZIO

    def set_peca(self, p: Posicao, v: int):
        r,c=p;
        if self.is_valido(r,c):
            pa=self.grid[r][c]
            if pa!=VAZIO: self._atualizar_hash_zobrist(r,c,pa)
            self.grid[r][c]=v
            if v!=VAZIO: self._atualizar_hash_zobrist(r,c,v)

    def mover_peca(self, o: Posicao, d: Posicao): p=self.get_peca(o); self.set_peca(o, VAZIO); self.set_peca(d, p)
    def remover_peca(self, p: Posicao): self.set_peca(p, VAZIO)
    @staticmethod
    def is_valido(r: int, c: int) -> bool: return 0<=r<TAMANHO_TABULEIRO and 0<=c<TAMANHO_TABULEIRO
    @staticmethod
    def get_oponente(cor: int) -> int: return PRETO if cor==BRANCO else BRANCO
    def get_posicoes_pecas(self, c: int) -> List[Posicao]: return [(r,col) for r in range(TAMANHO_TABULEIRO) for col in range(TAMANHO_TABULEIRO) if Peca.get_cor(self.grid[r][col])==c]

    def _encontrar_capturas_recursivo(self, pos_a: Posicao, cor: int, tipo: int, cam_a: Movimento, caps_cam: Set[Posicao]) -> List[Movimento]:
        seqs=[]; op=self.get_oponente(cor); dirs=DIRECOES_DAMA
        for dr,dc in dirs:
            if tipo==PEDRA:
                pc=(pos_a[0]+dr,pos_a[1]+dc); pd=(pos_a[0]+2*dr,pos_a[1]+2*dc);
                if self.is_valido(*pd) and Peca.get_cor(self.get_peca(pc))==op and self.get_peca(pd)==VAZIO and pc not in caps_cam:
                    nc=cam_a+[pd]; ncaps=caps_cam|{pc}; cont=self._encontrar_capturas_recursivo(pd,cor,tipo,nc,ncaps); (seqs.extend(cont) if cont else seqs.append(nc))
            else: # DAMA
                for i in range(1,TAMANHO_TABULEIRO):
                    pi=(pos_a[0]+i*dr,pos_a[1]+i*dc);
                    if not self.is_valido(*pi): break;
                    peca_i=self.get_peca(pi)
                    if Peca.get_cor(peca_i)==op and pi not in caps_cam:
                        for j in range(i+1,TAMANHO_TABULEIRO):
                            pd=(pos_a[0]+j*dr,pos_a[1]+j*dc);
                            if not self.is_valido(*pd): break
                            if self.get_peca(pd)==VAZIO: nc=cam_a+[pd]; ncaps=caps_cam|{pi}; cont=self._encontrar_capturas_recursivo(pd,cor,tipo,nc,ncaps); (seqs.extend(cont) if cont else seqs.append(nc))
                            else: break
                        break
                    elif peca_i!=VAZIO: break
        return seqs

    def encontrar_movimentos_possiveis(self, cor: int, apenas_capturas: bool = False) -> List[Movimento]:
        tc=[]; mc=0;
        for pos_i in self.get_posicoes_pecas(cor):
            # Ignorar damas recém-promovidas
            if pos_i in self.damas_recem_promovidas:
                continue
                
            pv=self.get_peca(pos_i); tipo=Peca.get_tipo(pv); caps_peca=self._encontrar_capturas_recursivo(pos_i,cor,tipo,[pos_i],set())
            if caps_peca: tc.extend(caps_peca); mc=max(mc, max((len(s)-1 for s in caps_peca if len(s)>1), default=0))
        if mc>0: return [s for s in tc if len(s)-1==mc]
        if apenas_capturas: return []
        simples=[];
        for pos_i in self.get_posicoes_pecas(cor):
            # Ignorar damas recém-promovidas
            if pos_i in self.damas_recem_promovidas:
                continue
                
            pv=self.get_peca(pos_i); tp=Peca.get_tipo(pv); cp=Peca.get_cor(pv); dirs=DIRECOES_PEDRA[cp] if tp==PEDRA else DIRECOES_DAMA
            if tp == PEDRA:
                for dr, dc in dirs:
                    pd=(pos_i[0]+dr,pos_i[1]+dc);
                    if self.is_valido(*pd) and self.get_peca(pd)==VAZIO: simples.append([pos_i,pd])
            else:
                for dr, dc in dirs:
                    for i in range(1, TAMANHO_TABULEIRO):
                        pd=(pos_i[0]+i*dr,pos_i[1]+i*dc);
                        if not self.is_valido(*pd): break
                        if self.get_peca(pd)==VAZIO: simples.append([pos_i,pd])
                        else: break

        # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        # <<<<<<<<<<<<<<<<<<<<<< PRINT DE DEBUG ADICIONADO >>>>>>>>>>>>>>>>>>>>
        # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        if cor == PRETO and mc == 0: # Só imprime para as Pretas quando não há capturas
             movimentos_formatados = [f"{self.pos_para_alg(m[0])}->{self.pos_para_alg(m[1])}" for m in simples]
             print(f"[DEBUG LOGIC] Mov Simples PRETO: {movimentos_formatados}")
        elif cor == BRANCO and mc == 0: # Opcional: Imprimir para Brancas também
             movimentos_formatados = [f"{self.pos_para_alg(m[0])}->{self.pos_para_alg(m[1])}" for m in simples]
             print(f"[DEBUG LOGIC] Mov Simples BRANCO: {movimentos_formatados}")
        # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        return simples

    def identificar_pecas_capturadas(self, mov: Movimento) -> Dict[Posicao, int]:
        caps={};
        if len(mov)<=1: return caps;
        try: pv=self.get_peca(mov[0]); c=Peca.get_cor(pv); op=self.get_oponente(c)
        except IndexError: return caps
        if pv==VAZIO: return caps
        for i in range(len(mov)-1):
            try:
                p1,p2=mov[i],mov[i+1]; dr,dc=p2[0]-p1[0],p2[1]-p1[1]; d=max(abs(dr),abs(dc));
                if d==0: continue
                sr,sc=dr//d,dc//d
                for j in range(1,d):
                    pi=(p1[0]+j*sr,p1[1]+j*sc); pv_i=self.get_peca(pi);
                    if Peca.get_cor(pv_i) == op: caps[pi] = pv_i; break
            except IndexError: print(f"Erro idx id_caps: {mov}"); continue
        return caps

    def _fazer_lance(self, mov: Movimento) -> EstadoLanceDesfazer:
        o=mov[0]; d=mov[-1]; h_a=self.hash_atual; p_o=self.get_peca(o); c=Peca.get_cor(p_o); t_o=Peca.get_tipo(p_o)
        pc=self.identificar_pecas_capturadas(mov); self.mover_peca(o,d);
        for pos_c in pc: self.remover_peca(pos_c)
        pr=False; l_p=0 if c==BRANCO else TAMANHO_TABULEIRO-1;
        damas_adicionadas = set()
        if t_o==PEDRA and d[0]==l_p:
            nv=DB if c==BRANCO else DP;
            self.set_peca(d,nv);
            pr=True
            # Marcar a dama como recém-promovida e retornar a informação
            # para que o método executar_lance_completo na classe Partida
            # possa tratar e encerrar o turno
            self.damas_recem_promovidas.add(d)
            damas_adicionadas.add(d)
        self._atualizar_hash_turno(); return EstadoLanceDesfazer(mov,p_o,pc,pr,h_a,damas_adicionadas)

    def _desfazer_lance(self, e: EstadoLanceDesfazer):
        self.hash_atual=e.hash_anterior; mov=e.movimento; o=mov[0]; d=mov[-1]; p_r=e.peca_movida_original
        self.grid[d[0]][d[1]]=VAZIO; self.grid[o[0]][o[1]]=p_r;
        for pos_c,val_c in e.pecas_capturadas.items(): self.grid[pos_c[0]][pos_c[1]] = val_c
        # Remover damas recém-promovidas que foram adicionadas neste movimento
        for pos in e.damas_recem_promovidas_adicionadas:
            if pos in self.damas_recem_promovidas:
                self.damas_recem_promovidas.remove(pos)

    def avaliar_heuristica(self, cor_ref: int) -> float: # Usa constantes globais
        s=0.0; op=self.get_oponente(cor_ref); mp,md,opd,od=0,0,0,0; bpm,bpo=0.0,0.0
        
        # Definir as posições de borda
        bordas = [(0, 1), (0, 3), (0, 5), (0, 7), (1, 0), (2, 7), (3, 0), (4, 7), (5, 0), (6, 7), (7, 0), (7, 2), (7, 4), (7, 6)]
        
        for r in range(TAMANHO_TABULEIRO):
            for c in range(TAMANHO_TABULEIRO):
                pv=self.grid[r][c]
                if pv!=VAZIO:
                    cr,tp=Peca.get_cor(pv),Peca.get_tipo(pv); l_av=r if cr==PRETO else (TAMANHO_TABULEIRO-1-r); pos=(r,c)
                    l_seg_propria = 0 if cr==BRANCO else TAMANHO_TABULEIRO-1
                    l_base_propria = {0, 1} if cr == BRANCO else {TAMANHO_TABULEIRO-1, TAMANHO_TABULEIRO-2}
                    l_promo_iminente = 1 if cr==BRANCO else TAMANHO_TABULEIRO-2
                    if cr==cor_ref:
                        md = md+1 if tp==DAMA else md; mp = mp+1 if tp==PEDRA else mp
                        bpm += l_av*BONUS_AVANCO_PEDRA if tp==PEDRA else 0
                        bpm += (BONUS_CONTROLE_CENTRO_DAMA if tp==DAMA else BONUS_CONTROLE_CENTRO_PEDRA) if pos in self.casas_centro_expandido else 0
                        bpm += BONUS_SEGURANCA_ULTIMA_LINHA if r==l_seg_propria else 0
                        bpm += sum(1 for dr,dc in DIRECOES_DAMA if self.is_valido(r+dr,c+dc) and self.get_peca((r+dr,c+dc))==VAZIO)*BONUS_MOBILIDADE_DAMA if tp==DAMA else 0
                        bpm += PENALIDADE_PEDRA_ATRASADA if tp==PEDRA and r in l_base_propria else 0
                        # viz=sum(1 for dr,dc in [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)] if self.is_valido(r+dr,c+dc) and Peca.get_cor(self.grid[r+dr][c+dc])==cr)
                        # bpm += viz*BONUS_CONECTIVIDADE if viz>0 else PENALTY_PIECE_ISOLADA
                        bpm += BONUS_PRESTES_PROMOVER if tp==PEDRA and r==l_promo_iminente else 0
                        bpm += BONUS_PECA_NA_BORDA if pos in bordas else 0
                    else: # Oponente
                        l_seg_opon = 0 if cr==BRANCO else TAMANHO_TABULEIRO-1
                        l_base_opon = {0, 1} if cr == BRANCO else {TAMANHO_TABULEIRO-1, TAMANHO_TABULEIRO-2}
                        l_promo_iminente_opon = 1 if cr==BRANCO else TAMANHO_TABULEIRO-2
                        od = od+1 if tp==DAMA else od; opd = opd+1 if tp==PEDRA else opd
                        bpo += l_av*BONUS_AVANCO_PEDRA if tp==PEDRA else 0
                        bpo += (BONUS_CONTROLE_CENTRO_DAMA if tp==DAMA else BONUS_CONTROLE_CENTRO_PEDRA) if pos in self.casas_centro_expandido else 0
                        bpo += BONUS_SEGURANCA_ULTIMA_LINHA if r==l_seg_opon else 0
                        bpo += sum(1 for dr,dc in DIRECOES_DAMA if self.is_valido(r+dr,c+dc) and self.get_peca((r+dr,c+dc))==VAZIO)*BONUS_MOBILIDADE_DAMA if tp==DAMA else 0
                        bpo += PENALIDADE_PEDRA_ATRASADA if tp==PEDRA and r in l_base_opon else 0
                        # viz=sum(1 for dr,dc in [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)] if self.is_valido(r+dr,c+dc) and Peca.get_cor(self.grid[r+dr][c+dc])==cr)
                        # bpo += viz*BONUS_CONECTIVIDADE if viz>0 else PENALTY_PIECE_ISOLADA
                        bpo += BONUS_PRESTES_PROMOVER if tp==PEDRA and r==l_promo_iminente_opon else 0
                        bpo += BONUS_PECA_NA_BORDA if pos in bordas else 0
        score = (mp * VALOR_PEDRA) + (md * VALOR_DAMA) - (opd * VALOR_PEDRA) - (od * VALOR_DAMA) + bpm - bpo
        return score

    @staticmethod
    def pos_para_alg(p: Posicao)->str: r,c=p; return chr(ord('a')+c)+str(TAMANHO_TABULEIRO-r) if Tabuleiro.is_valido(r,c) else "Inv"
    @staticmethod
    def alg_para_pos(alg: str)->Optional[Posicao]: alg=alg.lower().strip(); return (lambda c,l: (l,c) if Tabuleiro.is_valido(l,c) else None)(ord(alg[0])-ord('a'), TAMANHO_TABULEIRO-int(alg[1])) if len(alg)==2 and 'a'<=alg[0]<='h' and '1'<=alg[1]<='8' else None

    def criar_copia(self) -> 'Tabuleiro':
        """Cria uma cópia profunda do tabuleiro atual."""
        nova_copia = Tabuleiro(estado_inicial=False)  # Cria um tabuleiro vazio
        nova_copia.grid = [linha[:] for linha in self.grid]  # Copia profunda da grade
        nova_copia.hash_atual = self.hash_atual
        nova_copia.damas_recem_promovidas = self.damas_recem_promovidas.copy()  # Copia as damas recém-promovidas
        return nova_copia

    def limpar_damas_recem_promovidas_por_cor(self, cor: int):
        """
        Remove as damas recém-promovidas de uma cor específica da lista de controle.
        Chamado quando termina o turno do jogador oponente.
        """
        # Para cada posição no conjunto de damas recém-promovidas
        damas_para_remover = []
        for pos in self.damas_recem_promovidas:
            peca = self.get_peca(pos)
            # Verificar se a peça pertence à cor especificada
            if Peca.get_cor(peca) == cor:
                damas_para_remover.append(pos)
        
        # Remover as damas da cor especificada
        for pos in damas_para_remover:
            self.damas_recem_promovidas.remove(pos)

# --- Classe Partida ---
class Partida:
    def __init__(self, jogador_branco: str = "Humano", jogador_preto: str = "IA"):
        self.tabuleiro = Tabuleiro(); self.jogador_atual = BRANCO; self.movimentos_legais_atuais: List[Movimento] = []
        self.contador_lances_sem_progresso = 0; self.total_lances = 0; self.vencedor = None
        self.tipo_jogadores = {BRANCO: jogador_branco, PRETO: jogador_preto}; self._atualizar_movimentos_legais()
    def _atualizar_movimentos_legais(self):
        self.movimentos_legais_atuais = self.tabuleiro.encontrar_movimentos_possiveis(self.jogador_atual)
        if self.vencedor is None and not self.movimentos_legais_atuais:
             op = Tabuleiro.get_oponente(self.jogador_atual); self.vencedor = self.jogador_atual if not self.tabuleiro.get_posicoes_pecas(op) else op
             # print(f"[Partida] Fim detectado em _atualizar_movimentos_legais. Vencedor: {self.vencedor}")
    def _verificar_fim_de_jogo(self):
        if self.vencedor is not None: return True
        op = Tabuleiro.get_oponente(self.jogador_atual);
        if not self.tabuleiro.get_posicoes_pecas(op): self.vencedor = self.jogador_atual; print(f"[Partida] Fim (sem peças oponente)."); return True
        if self.contador_lances_sem_progresso >= 40: self.vencedor = VAZIO; print("[Partida] Fim (Empate)."); return True
        return False
    def trocar_turno(self): 
        # Primeiro armazena o jogador atual
        jogador_anterior = self.jogador_atual
        # Troca o turno
        self.jogador_atual = Tabuleiro.get_oponente(self.jogador_atual)
        # Agora limpa as damas recém-promovidas do jogador que vai jogar
        # (as que foram promovidas no turno anterior do mesmo jogador, quando o oponente jogou)
        self.tabuleiro.limpar_damas_recem_promovidas_por_cor(self.jogador_atual)
    def executar_lance_completo(self, movimento: Movimento) -> bool:
        if not self.movimentos_legais_atuais or movimento not in self.movimentos_legais_atuais: print(f"Erro: Mov inválido Partida: {movimento}"); return False
        jogador_antes = self.jogador_atual
        estado_desfazer = self.tabuleiro._fazer_lance(movimento);
        houve_captura = bool(estado_desfazer.pecas_capturadas); foi_movimento_pedra = (Peca.get_tipo(estado_desfazer.peca_movida_original) == PEDRA)
        
        # Verifica se houve promoção para dama neste movimento
        foi_promovido = estado_desfazer.foi_promovido
        
        if houve_captura or foi_movimento_pedra: self.contador_lances_sem_progresso = 0
        else: self.contador_lances_sem_progresso += 1
        self.total_lances += 1
        
        # Se houve promoção para dama, passa o turno imediatamente para o adversário
        # sem verificar se há mais capturas possíveis
        if foi_promovido:
            print(f"[REGRA] Peça promovida a dama em {Tabuleiro.pos_para_alg(movimento[-1])}. Passando turno para adversário.")
            self.jogador_atual = Tabuleiro.get_oponente(jogador_antes)
            # Já limpa as damas recém promovidas do jogador que vai jogar
            self.tabuleiro.limpar_damas_recem_promovidas_por_cor(self.jogador_atual)
            self._atualizar_movimentos_legais()
            self._verificar_fim_de_jogo()
            return True
            
        # A lógica original
        self.jogador_atual = Tabuleiro.get_oponente(jogador_antes)
        self._atualizar_movimentos_legais()
        self._verificar_fim_de_jogo()
        return True

    def criar_copia(self) -> 'Partida':
        """Cria uma cópia profunda da partida atual."""
        copia = Partida(
            jogador_branco=self.tipo_jogadores[BRANCO], 
            jogador_preto=self.tipo_jogadores[PRETO]
        )
        copia.tabuleiro = self.tabuleiro.criar_copia()
        copia.jogador_atual = self.jogador_atual
        copia.contador_lances_sem_progresso = self.contador_lances_sem_progresso
        copia.total_lances = self.total_lances
        copia.vencedor = self.vencedor
        copia.movimentos_legais_atuais = [movimento[:] for movimento in self.movimentos_legais_atuais]
        return copia

# --- Classe MotorIA (Versão com Iterative Deepening + Time Management) ---
class MotorIA:
    def __init__(self, profundidade: int, tempo_limite: float = TEMPO_PADRAO_IA):
        self.profundidade_maxima = profundidade
        self.tempo_limite = tempo_limite
        self.nos_visitados = 0; self.nos_quiescence_visitados = 0; self.tt_hits = 0
        self.transposition_table: Dict[int, TTEntry] = {}
        self.killer_moves: List[List[Optional[Movimento]]] = [ [None, None] for _ in range(profundidade + 1)]
        self.history_heuristic: Dict[Tuple[Posicao, Posicao], int] = defaultdict(int)
        # Contadores de diagnóstico adicionados
        self.profundidade_real_atingida = 0
        self.podas_alpha = 0
        self.podas_beta = 0
        self.tempo_por_nivel = defaultdict(float)
        # Controle de tempo e iterative deepening
        self.tempo_inicio = 0.0
        self.tempo_acabou = False
        self.melhor_movimento_atual = None
        self.profundidade_completa = 0

    def limpar_tt_e_historico(self):
        self.transposition_table = {}; self.killer_moves = [ [None, None] for _ in range(self.profundidade_maxima + 1)]; self.history_heuristic = defaultdict(int);
        # Resetar contadores de diagnóstico
        self.profundidade_real_atingida = 0
        self.podas_alpha = 0
        self.podas_beta = 0
        self.tempo_por_nivel = defaultdict(float)
        # Resetar controle de tempo
        self.tempo_inicio = 0.0
        self.tempo_acabou = False
        self.melhor_movimento_atual = None
        self.profundidade_completa = 0

    def _formatar_movimento(self, mov: Movimento) -> str: return " -> ".join([Tabuleiro.pos_para_alg(p) for p in mov]) if mov else "N/A"
    def _mov_para_chave_history(self, mov: Movimento) -> Optional[Tuple[Posicao, Posicao]]: return (mov[0], mov[-1]) if mov and len(mov) >= 2 else None

    def verificar_tempo(self) -> bool:
        """Verifica se o tempo de busca foi excedido."""
        if time.time() - self.tempo_inicio > self.tempo_limite:
            self.tempo_acabou = True
            return True
        return False

    def encontrar_melhor_movimento(self, partida: Partida, cor_ia: int, movimentos_legais: List[Movimento]) -> Optional[Movimento]:
        if not movimentos_legais: print("[IA] Nenhum movimento legal."); return None
        if len(movimentos_legais) == 1: unico=movimentos_legais[0]; print(f"[IA] Movimento único: {self._formatar_movimento(unico)}"); return unico

        self.limpar_tt_e_historico(); self.tempo_inicio = time.time()
        self.nos_visitados = 0; self.nos_quiescence_visitados = 0; self.tt_hits = 0
        self.melhor_movimento_atual = movimentos_legais[0] # Movimento padrão caso tempo acabe muito rápido

        print(f"\n[IA] Buscando melhor mov para {Peca.get_char(cor_ia)} (Iterative Deepening, max={self.profundidade_maxima}, t={self.tempo_limite}s)")
        # Trabalhar com uma cópia do tabuleiro para evitar modificações no original
        tab_copia = partida.tabuleiro.criar_copia()
        start_time_total = time.time()

        # Dicionário para armazenar pontuações dos movimentos em cada profundidade
        resultados_por_profundidade = {}
        
        # Implementação de Iterative Deepening
        for prof_atual in range(1, self.profundidade_maxima + 1):
            if self.tempo_acabou:
                print(f"[IA] Tempo limite atingido. Usando melhor mov da prof {self.profundidade_completa}")
                break
                
            tempo_inicio_prof = time.time()
            alpha = -float('inf'); beta = float('inf')
            movs_avaliados = {}
            
            # Ordenação raiz para esta profundidade
            mov_caps_raiz = [m for m in movimentos_legais if len(tab_copia.identificar_pecas_capturadas(m)) > 0]
            mov_simples_raiz = [m for m in movimentos_legais if m not in mov_caps_raiz]
            mov_simples_raiz.sort(key=lambda m: self.history_heuristic.get(self._mov_para_chave_history(m), 0), reverse=True)
            movs_ord_raiz = mov_caps_raiz + mov_simples_raiz
            
            # Usar último melhor movimento primeiro (se existir e não for captura)
            if self.melhor_movimento_atual in mov_simples_raiz:
                mov_simples_raiz.remove(self.melhor_movimento_atual)
                movs_ord_raiz = mov_caps_raiz + [self.melhor_movimento_atual] + mov_simples_raiz
                
            melhor_score_prof = -float('inf')
            melhor_mov_prof = None
            
            try:
                for mov in movs_ord_raiz:
                    if self.verificar_tempo(): raise TempoExcedidoError("Tempo excedido durante avaliação de movimentos")
                    
                    # Usar o mesmo tabuleiro para todos os movimentos (melhor desempenho)
                    estado_d = tab_copia._fazer_lance(mov)
                    jog_apos = Tabuleiro.get_oponente(cor_ia)
                    cap = bool(estado_d.pecas_capturadas)
                    pd = (Peca.get_tipo(estado_d.peca_movida_original)==PEDRA)
                    ct_p = 0 if cap or pd else partida.contador_lances_sem_progresso+1
                    
                    score = -self.minimax(tab_copia, ct_p, prof_atual - 1, -beta, -alpha, jog_apos, cor_ia) # NegaMax
                    tab_copia._desfazer_lance(estado_d)  # Desfazer o movimento após análise
                    
                    movs_avaliados[self._formatar_movimento(mov)] = score
                    
                    if score > melhor_score_prof:
                        melhor_score_prof = score
                        melhor_mov_prof = mov
                        
                    alpha = max(alpha, melhor_score_prof)
                    
                    if self.verificar_tempo(): raise TempoExcedidoError("Tempo excedido após avaliação de um movimento")
            
                # Atualizar melhor movimento se completou a profundidade sem erros
                if melhor_mov_prof:
                    self.melhor_movimento_atual = melhor_mov_prof
                    self.profundidade_completa = prof_atual
                    resultados_por_profundidade[prof_atual] = movs_avaliados
                
                tempo_prof = time.time() - tempo_inicio_prof
                print(f"[IA] Prof {prof_atual} completa em {tempo_prof:.2f}s: {self._formatar_movimento(melhor_mov_prof)} (Score: {melhor_score_prof:.3f})")
                
                # Se levou muito tempo para esta profundidade, provavelmente a próxima excederá o limite
                tempo_restante = self.tempo_limite - (time.time() - self.tempo_inicio)
                # Usar controle adaptativo baseado em percentual do tempo restante, valor reduzido para permitir mais exploração
                if tempo_prof > tempo_restante * 0.4:
                    print(f"[IA] Prevendo tempo insuficiente para próxima profundidade ({tempo_prof:.2f}s > {tempo_restante*0.4:.2f}s). Parando em {prof_atual}.")
                    break
                    
                # Verificar novamente se o tempo acabou
                if self.verificar_tempo():
                    print(f"[IA] Tempo limite atingido após completar profundidade {prof_atual}")
                    break
                    
            except TempoExcedidoError as e:
                print(f"[IA] {str(e)} na profundidade {prof_atual}")
                break
                
        end_time_total = time.time()
        
        # Mostrar último resultado completo
        if self.profundidade_completa > 0 and self.profundidade_completa in resultados_por_profundidade:
            print(f"\n[IA] Avaliação final (profundidade {self.profundidade_completa}):")
            res_ord = sorted(resultados_por_profundidade[self.profundidade_completa].items(), key=lambda item: item[1], reverse=True)
            for mov_s, score_m in res_ord[:5]: # Mostrar apenas os 5 melhores para não poluir
                print(f"  - Movimento: {mov_s:<15} -> Score: {score_m:.3f}")
                
        if self.melhor_movimento_atual:
            print(f"\n[IA] Escolhido: {self._formatar_movimento(self.melhor_movimento_atual)} (Prof: {self.profundidade_completa})")
        else:
            print("[IA] Nenhum movimento válido encontrado/escolhido.")
            self.melhor_movimento_atual = random.choice(movimentos_legais) if movimentos_legais else None
            
        # Estatísticas detalhadas
        print(f"[IA] Nós (Minimax): {self.nos_visitados}, (Quiescence): {self.nos_quiescence_visitados}, TT Hits: {self.tt_hits}")
        print(f"[IA] Profundidade Máxima Configurada: {self.profundidade_maxima}, Profundidade Completada: {self.profundidade_completa}")
        print(f"[IA] Podas Alpha: {self.podas_alpha}, Podas Beta: {self.podas_beta}")
        print(f"[IA] Tempo Total da Busca: {end_time_total - start_time_total:.2f}s")
        print(f"[IA] Média de nós por segundo: {(self.nos_visitados + self.nos_quiescence_visitados) / max(0.001, end_time_total - start_time_total):.0f}")
        print("-" * 30)
        return self.melhor_movimento_atual

    def minimax(self, tab: Tabuleiro, cont_emp: int, prof: int, alpha: float, beta: float, jog: int, cor_ia: int) -> float:
        # Verificar tempo periodicamente (a cada 1000 nós)
        if self.nos_visitados % 1000 == 0 and self.verificar_tempo():
            raise TempoExcedidoError("Tempo excedido durante minimax")
            
        # Registrar a profundidade máxima atingida
        prof_atual = self.profundidade_completa + 1 - prof
        self.profundidade_real_atingida = max(self.profundidade_real_atingida, prof_atual)
        
        # Registrar tempo do nível (para diagnóstico)
        nivel_inicio = time.time()
        
        a_orig = alpha; hash_pos = tab.hash_atual; is_ia = (jog == cor_ia)
        melhor_mov_tt = None

        # Consulta TT
        entry = self.transposition_table.get(hash_pos)
        if entry and entry.profundidade >= prof:
            self.tt_hits += 1; melhor_mov_tt = entry.melhor_movimento
            if entry.flag == TT_FLAG_EXACT: return entry.score
            elif entry.flag == TT_FLAG_LOWERBOUND: alpha = max(alpha, entry.score)
            elif entry.flag == TT_FLAG_UPPERBOUND: beta = min(beta, entry.score)
            if beta <= alpha: return entry.score

        self.nos_visitados += 1
        if cont_emp >= 40: return 0.0

        # Quiescência
        if prof <= 0: return self.quiescence_search(tab, MAX_QUIESCENCE_DEPTH, alpha, beta, jog, cor_ia)

        # Movimentos
        movs = tab.encontrar_movimentos_possiveis(jog)
        if not movs: score_fim = float('-inf') if is_ia else float('inf'); self.transposition_table[hash_pos]=TTEntry(prof, score_fim, TT_FLAG_EXACT, None); return score_fim

        # Ordenação (TT, Killer, Captures, History)
        movs_ordenados = []; killer_list = []
        kd = self.profundidade_completa + 1 - prof
        if melhor_mov_tt is not None and melhor_mov_tt in movs: movs_ordenados.append(melhor_mov_tt); movs.remove(melhor_mov_tt)
        if kd >= 0 and kd < len(self.killer_moves):
            for kmov in self.killer_moves[kd]:
                if kmov is not None and kmov in movs: killer_list.append(kmov); movs.remove(kmov)
        movs_ordenados.extend(killer_list)
        mov_caps = [m for m in movs if len(tab.identificar_pecas_capturadas(m)) > 0]
        mov_nao_caps = [m for m in movs if m not in mov_caps]
        mov_nao_caps.sort(key=lambda m: self.history_heuristic.get(self._mov_para_chave_history(m), 0), reverse=True)
        movs_ordenados.extend(mov_caps); movs_ordenados.extend(mov_nao_caps)

        melhor_val = -float('inf'); melhor_mov_local = None

        # Loop Alpha-Beta NegaMax
        for mov in movs_ordenados:
            estado_d=tab._fazer_lance(mov); cp=bool(estado_d.pecas_capturadas); pd=Peca.get_tipo(estado_d.peca_movida_original)==PEDRA; ct_p=0 if cp or pd else cont_emp+1
            oponente = Tabuleiro.get_oponente(jog)
            score = -self.minimax(tab, ct_p, prof - 1, -beta, -alpha, oponente, cor_ia)
            tab._desfazer_lance(estado_d)

            if score > melhor_val: melhor_val = score; melhor_mov_local = mov
            alpha = max(alpha, melhor_val);
            if beta <= alpha: # Poda Beta
                 self.podas_beta += 1  # Contador de podas beta
                 if kd >= 0 and kd < len(self.killer_moves) and not cp:
                     if mov not in self.killer_moves[kd]:
                         self.killer_moves[kd].insert(0, mov)
                         self.killer_moves[kd] = self.killer_moves[kd][:2]
                 chave_hist = self._mov_para_chave_history(mov)
                 if chave_hist and not cp: self.history_heuristic[chave_hist] += prof * prof
                 break

        # Armazenamento TT
        flag = TT_FLAG_EXACT;
        if melhor_val <= a_orig: 
            flag = TT_FLAG_UPPERBOUND
            self.podas_alpha += 1  # Contador de podas alpha
        elif melhor_val >= beta: 
            flag = TT_FLAG_LOWERBOUND
            self.podas_beta += 1  # Contador de podas beta
            
        self.transposition_table[hash_pos] = TTEntry(prof, melhor_val, flag, melhor_mov_local)
        
        # Registrar tempo gasto neste nível
        nivel_fim = time.time()
        self.tempo_por_nivel[prof_atual] += nivel_fim - nivel_inicio
        
        return melhor_val

    # Quiescence Search (ajustado para verificar tempo)
    def quiescence_search(self, tab: Tabuleiro, prof_q: int, a: float, b: float, jog_q: int, cor_ia: int) -> float:
        # Verificar tempo periodicamente (a cada 5000 nós de quiescence)
        if self.nos_quiescence_visitados % 5000 == 0 and self.verificar_tempo():
            raise TempoExcedidoError("Tempo excedido durante quiescence_search")
            
        hash_pos = tab.hash_atual
        entry = self.transposition_table.get(hash_pos)
        if entry and entry.flag == TT_FLAG_EXACT and entry.profundidade >= -1 : self.tt_hits+=1; return entry.score

        self.nos_quiescence_visitados += 1
        stand_pat = tab.avaliar_heuristica(cor_ia)
        if prof_q <= 0: return stand_pat
        is_max = (jog_q == cor_ia)
        if is_max: a = max(a, stand_pat)
        else: b = min(b, stand_pat)
        if b <= a: return stand_pat
        mov_caps = tab.encontrar_movimentos_possiveis(jog_q, apenas_capturas=True)
        if not mov_caps: return stand_pat
        score_final_q = stand_pat
        if is_max:
            for mov in mov_caps:
                estado_d = tab._fazer_lance(mov)
                val = self.quiescence_search(tab, prof_q - 1, a, b, Tabuleiro.get_oponente(jog_q), cor_ia)
                tab._desfazer_lance(estado_d)
                score_final_q = max(score_final_q, val); a = max(a, score_final_q)
                if b <= a: break
        else:
            for mov in mov_caps:
                estado_d = tab._fazer_lance(mov)
                val = self.quiescence_search(tab, prof_q - 1, a, b, Tabuleiro.get_oponente(jog_q), cor_ia)
                tab._desfazer_lance(estado_d)
                score_final_q = min(score_final_q, val); b = min(b, score_final_q)
                if b <= a: break
        return score_final_q

# --- Bloco Principal (Teste) ---
if __name__ == "__main__":
     print("--- Testando damas_logic.py v12.3 Iterative Deepening + Time Management ---")
     partida_teste = Partida(jogador_branco="IA", jogador_preto="Humano")
     ia_teste = MotorIA(profundidade=PROFUNDIDADE_IA, tempo_limite=TEMPO_PADRAO_IA) # Usa tempo e profundidade configuráveis
     print(f"Profundidade Máxima de Teste: {PROFUNDIDADE_IA}, Tempo Limite: {TEMPO_PADRAO_IA}s")
     print("Estado Inicial:"); print(partida_teste.tabuleiro)
     if partida_teste.jogador_atual == BRANCO:
         print("\nCalculando movimento inicial para Brancas...")
         start_time = time.time()
         movimento_escolhido = ia_teste.encontrar_melhor_movimento(
             partida_teste,
             BRANCO,
             partida_teste.movimentos_legais_atuais
         )
         end_time = time.time()
         print(f"\n[Teste] Tempo de cálculo: {end_time - start_time:.2f}s")
         if movimento_escolhido: print(f"[Teste] Movimento Sugerido: {ia_teste._formatar_movimento(movimento_escolhido)}")
         else: print("[Teste] IA não encontrou movimento.")
         
         # Salvar estatísticas em um arquivo separado
         with open("stats_ia.txt", "w") as f:
             f.write("=== ESTATÍSTICAS DA IA ===\n")
             f.write(f"Profundidade Máxima Configurada: {ia_teste.profundidade_maxima}\n")
             f.write(f"Profundidade Completada: {ia_teste.profundidade_completa}\n")
             f.write(f"Profundidade Real Atingida: {ia_teste.profundidade_real_atingida}\n")
             f.write(f"Nós Visitados (Minimax): {ia_teste.nos_visitados}\n")
             f.write(f"Nós Visitados (Quiescence): {ia_teste.nos_quiescence_visitados}\n")
             f.write(f"Total de Nós: {ia_teste.nos_visitados + ia_teste.nos_quiescence_visitados}\n")
             f.write(f"TT Hits: {ia_teste.tt_hits}\n")
             f.write(f"Podas Alpha: {ia_teste.podas_alpha}\n")
             f.write(f"Podas Beta: {ia_teste.podas_beta}\n")
             f.write(f"Tempo Total: {end_time - start_time:.2f}s\n")
             f.write(f"Nós por segundo: {(ia_teste.nos_visitados + ia_teste.nos_quiescence_visitados) / max(0.001, end_time - start_time):.0f}\n")
             f.write("\nTempo por Nível de Profundidade:\n")
             for nivel, tempo in sorted(ia_teste.tempo_por_nivel.items()):
                 f.write(f"  - Nível {nivel}: {tempo:.4f}s\n")
     print("\n--- Fim do Teste ---")